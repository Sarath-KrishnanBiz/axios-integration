# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: apicollection
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs12.x

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  singleprofile:
    handler: handler.singleprofile
    events:
     - http:
        method: post
        path: singleprofile
    middleware:
      pre:
       - handler.middleware
  Login:
    handler: handler.Login
    events:
     - http:
        method: post
        path: Login
  insertsingleprofile:
    handler: handler.insertsingleprofile
    events:
     - http:
        method: post
        path: insertsingleprofile
    middleware:
      pre:
       - handler.middleware
  updatesingleprofile:
    handler: handler.updatesingleprofile
    events:
     - http:
        method: post
        path: updatesingleprofile
    middleware:
      pre:
       - handler.middleware
  userlistfilter:
    handler: handler.userlistfilter
    events:
     - http:
        method: post
        path: userlistfilter
    middleware:
      pre:
       - handler.middleware
  campaignprospectcount:
    handler: handler.campaignprospectcount
    events:
     - http:
        method: post
        path: campaignprospectcount
    middleware:
      pre:
       - handler.middleware
  managerprospectcount:
    handler: handler.managerprospectcount
    events:
     - http:
        method: post
        path: managerprospectcount
    middleware:
      pre:
       - handler.middleware
  salessuccessrate:
    handler: handler.salessuccessrate
    events:
     - http:
        method: post
        path: salessuccessrate
    middleware:
      pre:
       - handler.middleware
  leadfunnel:
    handler: handler.leadfunnel
    events:
     - http:
        method: post
        path: leadfunnel
    middleware:
      pre:
       - handler.middleware
  prospectGrowth:
    handler: handler.prospectGrowth
    events:
     - http:
        method: post
        path: prospectGrowth
  prospectProgress:
    handler: handler.prospectProgress
    events:
     - http:
        method: post
        path: prospectProgress
  getleadlistwithfilter:
    handler: handler.getleadlistwithfilter   
    events:
     - http:
        method: post
        path: getleadlistwithfilter
    middleware:
      pre:
       - handler.middleware
  getsinglelead:
    handler: handler.getsinglelead
    events:
     - http:
        method: post
        path: getsinglelead
    middleware:
      pre:
       - handler.middleware
  insertsinglelead:
    handler: handler.insertsinglelead
    events:
     - http:
        method: post
        path: insertsinglelead
    middleware:
      pre:
       - handler.middleware
  updatesinglelead:
    handler: handler.updatesinglelead
    events:
     - http:
        method: post
        path: updatesinglelead
    middleware:
      pre:
       - handler.middleware
  getCampaignlistwithfilter:
    handler: handler.getCampaignlistwithfilter
    events:
     - http:
        method: post
        path: getCampaignlistwithfilter
    middleware:
      pre:
       - handler.middleware
  getsingleCampaign:
    handler: handler.getsingleCampaign
    events:
     - http:
        method: post
        path: getsingleCampaign
    middleware:
      pre:
       - handler.middleware
  updateCampaign:
    handler: handler.updateCampaign
    events:
     - http:
        method: post
        path: updateCampaign
    # middleware:
    #   pre:
    #    - handler.middleware
  getProspectlistwithfilter:
    handler: handler.getProspectlistwithfilter
    events:
     - http:
        method: post
        path: getProspectlistwithfilter
  getsingletask:
    handler: handler.getsingletask
    events:
     - http:
        method: post
        path: getsingletask
    middleware:
      pre:
       - handler.middleware
  signup:
    handler: handler.signup
    events:
     - http:
        method: post
        path: signup
  verifyotp:
    handler: handler.verifyotp
    events:
     - http:
        method: post
        path: verifyotp
  resend:
    handler: handler.resend
    events:
     - http:
        method: post
        path: resend
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create   
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
plugins:
  - serverless-offline
  # - serverless-middleware